#!/bin/sh
# Register a new host on local network.
# (DNS domain and revzone, DHCP)
# Author:   Teodor 'døru' MICU <mteodor@gmail.com>
# Revision: June 14, 2013
#
# Location: /usr/local/sbin/

PATH="/usr/sbin:/usr/bin:/sbin:/bin"
set -eu

NAME="$(basename $0)"

# read custom configuration file if it's present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# set internal variables to their default values (if unset)
DIRZONE=${DIRZONE:-/etc/bind/zones}
DOMAIN=${DOMAIN:-$(dnsdomainname)}
REVZONE=${REVZONE:-10.in-addr.arpa}
FILEDHCP=${FILEDHCP:-/etc/dhcp/hosts.list}
FILEVLAN=${FILEVLAN:-/proc/net/vlan/config}

# must have read perms
[ -r "$DIRZONE/$DOMAIN" -a -w "$DIRZONE/$DOMAIN" ] || exit 1	# +write
[ -r "$DIRZONE/$REVZONE" -a -w "$DIRZONE/$REVZONE" ] || exit 1	# +write
[ -r "$FILEDHCP" -a -w "$FILEDHCP" ] || exit 1			# +write
[ -r "$FILEVLAN" ] || exit 1

# print usage instructions
usage()
{
	echo "Usage: $NAME [options] [HOST]"
	echo
	echo "Options:"
	echo "  -a, --addr, --ipaddr A.B.C.D  force IP address assignment"
	echo "  -g, --group GROUP             owner's working group (VLAN)"
	echo "  -h, --help                    display this help message and exit"
	echo "  -i, --info TEXT               short host description"
	echo "  -m, --mac ADDR                host's network MAC address (hex)"
	echo "  -o, --owner NAME              host's owner full name"
	echo "  -r, --room FNN                room number (max 999)"
}

# init vars to make "set -u" happy
HOST=
IPADDR=
GROUP=
MACADDR=
ROOM=
OWNER=
INFO=

# getopt
while [ $# -gt 0 ]; do
	case "$1" in
	"-a" | "--addr" | "--ipaddr" )
		if [ $# -lt 2 ]; then
			echo "$NAME: no IP address." >&2
			echo
			usage
			exit 120
		fi
		shift
		IPADDR="$1"
		;;
	"-g" | "--group" )
		if [ $# -lt 2 ]; then
			echo "$NAME: no group name." >&2
			echo
			usage
			exit 200
		fi
		shift
		GROUP="$1"
		;;
	"-m" | "--mac" )
		if [ $# -lt 2 ]; then
			echo "$NAME: no MAC address." >&2
			echo
			usage
			exit 300
		fi
		shift
		MACADDR="$1"
		;;
	"-r" | "--room" )
		if [ $# -lt 2 ]; then
			echo "$NAME: no room number." >&2
			echo
			usage
			exit 400
		fi
		shift
		ROOM="$1"
		;;
	"-o" | "--owner" )
		if [ $# -lt 2 ]; then
			echo "$NAME: no owner name." >&2
			echo
			usage
			exit 500
		fi
		shift
		OWNER="$1"
		;;
	"-i" | "--info" )
		if [ $# -lt 2 ]; then
			echo "$NAME: no host info." >&2
			echo
			usage
			exit 600
		fi
		shift
		INFO="$1"
		;;
	"-h" | "--help" )
		usage
		exit 0
		;;
	-* )
		echo "$NAME: option '$1' is not recognized." >&2
		echo
		usage
		exit 9
		;;
	* )
		if [ "$HOST" ]; then
			echo "$NAME: more than one host name." >&2
			echo
			usage
			exit 100
		fi
		HOST="$1"
		;;
	esac
	shift
done

# check host
ck_host()
{
	# RFC 952
	if [ -z "$HOST" ] || \
	   echo "$HOST" | grep --color '^-' >&2 || \
	   echo "$HOST" | grep --color '[^0-9a-zA-Z-]' >&2; then
		echo "$NAME: invalid host name." >&2
		return 101
	fi

	HOST=$(echo "$HOST" | tr A-Z a-z)
	if grep --color "^\s*$HOST\s" $DIRZONE/$DOMAIN >&2 || \
	   grep --color "|$HOST|" $FILEDHCP; then
		echo "$NAME: host is already in use." >&2
		return 102
	fi
}

# check IP address
ck_ipaddr()
{
	if [ -z "$IPADDR" ] || \
	   echo "$IPADDR" | grep --color '[^0-9.]' >&2; then
		echo "$NAME: invalid IP address." >&2
		return 121
	fi

	if [ $(echo "$IPADDR" | cut -d. -f1) -ne 10 ]; then
		echo "$NAME: invalid subnet address." >&2
		return 122
	fi

	if [ $(echo -n "$IPADDR" | wc -c) -gt 15 ]; then
		echo "$NAME: invalid IP address length." >&2
		return 123
	fi

	if [ $(echo "$IPADDR" | awk -F. '{ print NF }') -ne 4 ]; then
		echo "$NAME: invalid IP address syntax." >&2
		return 124
	fi

	# 10.TWO.THREE.NEXT
	IPADDRTWO=$(echo "$IPADDR" | cut -d. -f2)
	IPADDRTHREE=$(echo "$IPADDR" | cut -d. -f3)
	NEXT=$(echo "$IPADDR" | cut -d. -f4)

	if [ $IPADDRTWO -gt 255 ] || \
	   [ $IPADDRTHREE -gt 255 ] || \
	   [ $NEXT -gt 255 ]; then
		echo "$NAME: invalid IP address." >&2
		return 125
	fi
	LAST=$((NEXT-1))
	IPLAST=10.$IPADDRTWO.$IPADDRTHREE.$LAST

	if grep -qw "$IPADDR" $DIRZONE/$DOMAIN || \
	   grep -qw "^;\?$NEXT\.$IPADDRTHREE\.$IPADDRTWO" $DIRZONE/$REVZONE; then
		echo "$NAME: IP address is already registered." >&2
		return 126
	fi
}

# check group and get VLAN id
ck_group()
{
	if [ -z "$GROUP" ] || \
	   echo "$GROUP" | grep --color '[^a-zA-Z]' >&2; then
		echo "$NAME: invalid group name." >&2
		return 201
	fi

	GROUP=$(echo "$GROUP" | tr a-z A-Z)
	if [ "SERV" = "$GROUP" ]; then
		VLAN=0
	else
		group=$(echo -n "$GROUP" | tr A-Z a-z)
		VLAN=$(sed -n "s/$group\s\+|\s*\([0-9]*\)\s*.*$/\1/p" $FILEVLAN)
		if [ -z "$VLAN" ]; then
			echo "$NAME: VLAN '$GROUP' doesn't exist." >&2
			return 202
		fi
	fi
}

# check MAC address
ck_macaddr()
{
	if [ -z "$MACADDR" ] || \
	   echo "$MACADDR" | grep --color '[^:0-9a-fA-F]' >&2; then
		echo "$NAME: invalid MAC address." >&2
		return 301
	fi

	if [ $(echo -n "$MACADDR" | wc -c) -ne 17 ]; then
		echo "$NAME: invalid MAC address length." >&2
		return 302
	fi

	if [ $(echo "$MACADDR" | awk -F: '{ print NF }') -ne 6 ]; then
		echo "$NAME: invalid MAC address syntax." >&2
		return 303
	fi

	MACADDR=$(echo "$MACADDR" | tr A-Z a-z)
	if grep --color "^$GROUP|$MACADDR" $FILEDHCP >&2; then
		echo "$NAME: MAC address already registered in this group." >&2
		return 304
	fi
}

# check room number
ck_room()
{
	if [ -z "$ROOM" ] || \
	   echo "$ROOM" | grep --color '[^0-9]' >&2; then
		echo "$NAME: invalid room number." >&2
		return 401
	fi

	# remove 0's
	while [ "$ROOM" ] && [ "0" = "$(echo ${ROOM:-1} | cut -b1)" ]; do
		ROOM=${ROOM#0}
	done

	# 1 ≤ room number ≤ 999
	if [ $ROOM -gt 999 ]; then
		echo "$NAME: room number too big." >&2
		return 402
	fi
}

# check owner
ck_owner()
{
	if [ -z "$OWNER" ] || \
	   echo "$OWNER" | grep --color '[^-. a-zA-Z]' >&2; then
		echo "$NAME: invalid owner name." >&2
		return 501
	fi
}

# check info
ck_info()
{
	if [ -z "$INFO" ]; then
		echo "$NAME: no host info." >&2
		return 601
	fi
}

# scan for the next free IP address (> .20)
ipaddr_next()
{
	# 10.[VLAN+X].YZ.?, where XYZ = room number
	IPADDRTWO=$((VLAN + ROOM/100))
	IPADDRTHREE=$((ROOM - ROOM/100*100))

	IPADDR=10.$IPADDRTWO.$IPADDRTHREE
	NEXT=20					# the least significat IPv4 field
	while [ $NEXT -lt 255 ]; do
		if grep -qw "$IPADDR\.$NEXT" $DIRZONE/$DOMAIN || \
		   grep -qw "^;\?$NEXT\.$IPADDRTHREE\.$IPADDRTWO" $DIRZONE/$REVZONE || \
		   ping -qc1 $IPADDR.$NEXT >/dev/null || \
		   ip neigh list $IPADDR.$NEXT | grep -q lladdr; then
			NEXT=$((NEXT+1))
			continue
		else
			break
		fi
	done

	# all IP addresses in use?
	if [ $NEXT -eq 255 ]; then
		echo "$NAME: no more free IP addresses." >&2
		exit 199
	fi
	LAST=$((NEXT-1))
	IPLAST=$IPADDR.$LAST
	IPADDR=$IPADDR.$NEXT
}

# register new host on DNS zone
host_add()
{
	sed "s|$ZSERIAL|$NSERIAL|" -i~$ZSERIAL $DIRZONE/$DOMAIN
	if grep -q "\s$IPLAST\s*$" $DIRZONE/$DOMAIN; then
		sed "s|\s$IPLAST\s*$|&\n$HOST\t\t\tA\t$IPADDR|" -i $DIRZONE/$DOMAIN
	else
		echo "$HOST\t\t\tA\t$IPADDR" >> $DIRZONE/$DOMAIN
	fi
}

# register new IP address on rDNS zone
ipaddr_add()
{
	sed "s|$RSERIAL|$NSERIAL|" -i~$ZSERIAL $DIRZONE/$REVZONE
	REVLAST="$LAST.$IPADDRTHREE.$IPADDRTWO"
	REVNEXT="$NEXT.$IPADDRTHREE.$IPADDRTWO"
	if grep -q "^;\?$REVLAST\s.*$" $DIRZONE/$REVZONE; then
		sed "s|^;\?$REVLAST\s.*$|&\n$REVNEXT\t\tPTR\t$HOST.$DOMAIN.|" -i $DIRZONE/$REVZONE
	else
		echo "$REVNEXT\t\tPTR\t$HOST.$DOMAIN." >> $DIRZONE/$REVZONE
	fi
}

# add a new MACADDR:HOST entry in a DHCP group
dhcp_add()
{
	[ -e "$FILEDHCP~$ZSERIAL" ] || cp -a $FILEDHCP $FILEDHCP~$ZSERIAL
	LASTHOST=$(sed -n "s|^\([a-z0-9-]\+\)\s\+A\s$IPLAST\s*$|\1|p" $DIRZONE/$DOMAIN)

	#Group | MAC address | Host | Owner | Office | Info
	if [ "$LASTHOST" ] && \
	   grep -q "|$LASTHOST|" $FILEDHCP; then
		sed "s%|$LASTHOST|.*$%&\n$GROUP|$MACADDR|$HOST|$OWNER|$ROOM|$INFO%" -i $FILEDHCP
	else
		echo "$GROUP|$MACADDR|$HOST|$OWNER|$ROOM|$INFO" >> $FILEDHCP
	fi
}


#===================  main()  ===================#
exec 7<> $DIRZONE/$DOMAIN
exec 8<> $DIRZONE/$REVZONE
exec 9<> $FILEDHCP
if ! flock --nonblock 7 || \
   ! flock --nonblock 8 || \
   ! flock --nonblock 9; then
	echo "$NAME: cannot lock files, try again later." >&2
	exit 1
fi

# old zone serial number
ZSERIAL=$(sed -n "s|^\s*\([0-9]\+\)\s*; serial$|\1|p" $DIRZONE/$DOMAIN)
if [ -z "$ZSERIAL" ]; then
	echo "$NAME: DNS zone '$DOMAIN' has no serial number." >&2
	exit 2
fi

# old revzone serial number
RSERIAL=$(sed -n "s|^\s*\([0-9]\+\)\s*; serial$|\1|p" $DIRZONE/$REVZONE)
if [ -z "$RSERIAL" ]; then
	echo "$NAME: DNS zone '$REVZONE' has no serial number." >&2
	exit 2
fi

# new serial number for all DNS zones
NSERIAL="$(date '+%Y%m%d')00"
[ $ZSERIAL -lt $NSERIAL ] || NSERIAL=$((ZSERIAL + 1))
[ $RSERIAL -lt $NSERIAL ] || NSERIAL=$((RSERIAL + 1))

if [ -z "$HOST" ]; then
	# interactive execution
	while true; do
		echo -n "Enter host name: "
		read HOST
		ck_host && break
		echo
	done
	echo
else
	ck_host || exit $?
fi

if [ -z "$GROUP" ]; then
	# interactive execution
	while true; do
		echo -n "Enter group name (vlan): "
		read GROUP
		ck_group && break
		echo
	done
	echo
else
	ck_group || exit $?			# always before macaddr check
fi

if [ -z "$MACADDR" ]; then
	# interactive execution
	while true; do
		echo -n "Enter MAC address: "
		read MACADDR
		ck_macaddr && break
		echo
	done
	echo
else
	ck_macaddr || exit $?
fi

if [ -z "$ROOM" ]; then
	# interactive execution
	while true; do
		echo -n "Enter room number: "
		read ROOM
		ck_room && break
		echo
	done
	echo
else
	ck_room || exit $?
fi

if [ -z "$OWNER" ]; then
	# interactive execution
	while true; do
		echo -n "Enter owner name: "
		read OWNER
		ck_owner && break
		echo
	done
	echo
else
	ck_owner || exit $?
fi

if [ -z "$INFO" ]; then
	# interactive execution
	while true; do
		echo -n "Enter host info: "
		read INFO
		ck_info && break
		echo
	done
	echo
else
	ck_info || exit $?
fi

if [ -z "$IPADDR" ]; then
	ipaddr_next
else
	ck_ipaddr || exit $?
fi

echo "Host : $HOST ($MACADDR, $IPADDR)"
echo "Group: $GROUP (VLAN id $VLAN)"
echo "Room#: $ROOM"
echo "Owner: $OWNER"
echo "Info : $INFO"
host_add
ipaddr_add
dhcp_add
flock --unlock 7
flock --unlock 8
flock --unlock 9
:
