#!/bin/sh
# Update Bacula configuration for Director and Storage Daemon services.
# Author:   Teodor MICU <mteodor@gmail.com>
# Revision: December 08, 2011
#
# License: Public Domain
# Location: /usr/local/sbin/
#
# Version: 1.11


PATH="/usr/sbin:/usr/bin:/sbin:/bin"
set -e

DESC="Bacula configurator"
NAME=update-bacula

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# configuration file used by this script
[ -n "$CONF" ] || CONF="/etc/bacula/backups.list"
[ -n "$STORAGEDISK" ] || STORAGEDISK="/srv/bacula"
[ -n "$STORAGEPW" ] || STORAGEPW="shiezoodeipu6Aegakie"

# where are kept the filesets for each CLIENT+JOB combination
BDFS="/etc/bacula/director/filesets"

# where are kept the files generated by this script
[ -n "${BCACHE}" ] || BCACHE="/var/cache/bacula"
# required tests for CACHE directories
if echo "${BCACHE}" | grep -q -E '\s'; then
	echo "E: cache directory '${CONF}' must not contain spaces!" >&2
	exit 1
fi
[ "${BCACHE}" != "/" ] || exit 2			# top level directory is forbidden
[ -e "${BCACHE}" -a ! -d "${BCACHE}" ] && exit 3	# target must be a directory

if [ ! -f "${CONF}" ]; then
	echo "E: configuration file '${CONF}' does not exist!" >&2
	exit 4
fi

# mkbanner FILE
mkbanner(){
	[ -z "$1" -o -s "$1" ] && return 0
	cat > $1 <<__EOF__
#
# DO NOT EDIT THIS FILE
#
# It was automatically generated by /usr/local/sbin/update-bacula
# using settings from "${CONF}" configuration file
#

__EOF__
	return 0
}

# mkclient CLIENT
mkclient(){
	test -s ${BCACHE}/director/client_${CLIENT}.conf && return 0

	mkbanner ${BCACHE}/director/client_${CLIENT}.conf
	cat >> ${BCACHE}/director/client_${CLIENT}.conf <<__EOF__
Client {
  Name = "${CLIENT}"
  Address = ${CLIENTADDR}
  FDPort = 9102
  Password = "${PASSWORD}"
  Catalog = MyCatalog
  File Retention = ${FRETENTION}
  Job Retention = ${JRETENTION}
  AutoPrune = ${AUTOPRUNE}
}

__EOF__
	return 0
}

# mkfilesets CLIENT
mkfilesets(){
	mkbanner ${BCACHE}/director/filesets_${CLIENT}.conf
	for JOB in ${JOBS}; do
		if printf "${JOB}" | grep -q maildir; then
			INCLUDEFILE=${BCACHE}/director/${CLIENT}--${JOB}_files.list
			USER=$(printf "${JOB}" | sed -e "s%maildir.%%")
			U=$(printf "${USER}" | cut -b1)
			printf "/home/${U}/${USER}/mail" > ${INCLUDEFILE}
			cat <<__EOF__
FileSet {
  Name = "${CLIENT}--${JOB}_fileset"
  Include {
    Options {
      compression = GZIP
      signature = SHA1
    }
    File = <${INCLUDEFILE}
  }
  Exclude {
    File = /home/${U}/${USER}/mail/lock
  }
}

__EOF__
		else
			INCLUDEFILE=${BDFS}/${CLIENT}--${JOB}_files.list
			[ -f "${INCLUDEFILE}" ] || touch ${INCLUDEFILE}
			cat <<__EOF__
FileSet {
  Name = "${CLIENT}--${JOB}_fileset"
  Include {
    Options {
      compression = GZIP
      signature = SHA1
    }
    File = <${INCLUDEFILE}
  }
}

__EOF__
		fi
	done >> ${BCACHE}/director/filesets_${CLIENT}.conf
	return 0
}

# mkpools CLIENT
mkpools(){
	mkbanner ${BCACHE}/director/pools_${CLIENT}.conf
	for JOB in ${JOBS}; do cat <<__EOF__
Pool {
  Name = "${CLIENT}--${JOB}_pool"
  Pool Type = Backup
  Label Format = "${CLIENT}--${JOB}_volume_\${Year}-\${Month:p/2/0/r}-\${Day:p/2/0/r}_\${Hour:p/2/0/r}:\${Minute:p/2/0/r}"
  Recycle = no
  AutoPrune = ${AUTOPRUNE}
  Volume Retention = ${VRETENTION}
}

__EOF__
	done >> ${BCACHE}/director/pools_${CLIENT}.conf
	return 0
}

# mkstorage CLIENT
mkstorage(){
	test -s ${BCACHE}/director/storage_${CLIENT}.conf && return 0

	mkbanner ${BCACHE}/director/storage_${CLIENT}.conf
	cat >> ${BCACHE}/director/storage_${CLIENT}.conf <<__EOF__
Storage {
  Name = ${STORAGE}--${CLIENT}_filestorage
  Address = ${STORAGEADDR}
  SDPort = 9103
  Device = ${CLIENT}_filestorage
  Media Type = File
  Password = "${STORAGEPW}"
}

__EOF__

	mkbanner ${BCACHE}/storage/file_${CLIENT}.conf
	cat >> ${BCACHE}/storage/file_${CLIENT}.conf <<__EOF__
Device {
  Name = ${CLIENT}_filestorage
  Media Type = File
  Archive Device = ${STORAGEDISK}/${CLIENT}
  LabelMedia = yes
  AlwaysOpen = no
  AutomaticMount = yes
  Random Access = yes
  RemovableMedia = no
}

__EOF__
	[ -e "${STORAGEDISK}/${CLIENT}" ] || install -v -o bacula -g tape -m 0775 -d "${STORAGEDISK}/${CLIENT}"
	return 0
}

# mkjobs CLIENT
mkjobs(){
	mkbanner ${BCACHE}/director/jobs_${CLIENT}_backup.conf
	for JOB in ${JOBS}; do cat <<__EOF__
Job {
  Client = "${CLIENT}"
  Name = "${CLIENT}--${JOB}_backup"
  Type = "Backup"
  FileSet = "${CLIENT}--${JOB}_fileset"
  Messages = "Standard"
  Pool = "${CLIENT}--${JOB}_pool"
  Schedule = "${SCHEDULE}"
  Storage = "${STORAGE}--${CLIENT}_filestorage"
  Bootstrap = "/var/lib/bacula/%v_%t.bsr"
}

__EOF__
	done >> ${BCACHE}/director/jobs_${CLIENT}_backup.conf

	mkbanner ${BCACHE}/director/jobs_${CLIENT}_restore.conf
	for JOB in ${JOBS}; do
		WHERE="/var/tmp/brestore"
		RESTORE="${BDFS}/${CLIENT}--${JOB}_restore_directory"
		if [ -f "${RESTORE}" ] && [ $(wc -l <${RESTORE}) -eq 1 ]; then
			WHERE="$(head -1 ${RESTORE})"
		fi
		cat <<__EOF__
Job {
  Client = "${CLIENT}"
  Name = "${CLIENT}--${JOB}_restore"
  Type = "Restore"
  FileSet = "${CLIENT}--${JOB}_fileset"
  Messages = "Standard"
  Pool = "${CLIENT}--${JOB}_pool"
  Storage = "${STORAGE}--${CLIENT}_filestorage"
  Where = "${WHERE}"
  Write Bootstrap = "/var/lib/bacula/%v_%t.bsr"
}

__EOF__
	done >> ${BCACHE}/director/jobs_${CLIENT}_restore.conf
	return 0
}


####################========== main() ==========####################
[ -e "${BCACHE}/director" ] || mkdir -p ${BCACHE}/director
[ -e "${BCACHE}/storage" ] || mkdir -p ${BCACHE}/storage
[ -e "${BDFS}" ] || mkdir -p ${BDFS}
rm -f ${BCACHE}/director/*.conf
rm -f ${BCACHE}/director/*maildir*_files.list
rm -f ${BCACHE}/storage/file_*.conf
rm -f ${BCACHE}/director.conf ${BCACHE}/storage.conf

echo "Running ${DESC}:"
TMPFILE=$(mktemp)
grep '^[A-Za-z0-9]' ${CONF} | sed -e "s%\s*|\s*%|%g" > ${TMPFILE}
while read LINE; do
	CLIENT=$(printf "${LINE}" | cut -d\| -f1)
	test -z "${CLIENT}" && continue
	if printf "${CLIENT}" | grep -q '[^A-Za-z0-9_-]'; then
		echo "W: non alpha-numeric character in '${CLIENT}' client name (ignored)"
		continue
	fi
	if host ${CLIENT} | grep -q NXDOMAIN; then
		echo "W: host '${CLIENT}' not found (ignored)"
		continue
	fi
	CLIENTADDR=$(host ${CLIENT} | cut '-d ' -f1)

	PASSWORD=$(printf "${LINE}" | cut -d\| -f2)
	test -z "${PASSWORD}" && continue

	SCHEDULE=$(printf "${LINE}" | cut -d\| -f3)
	test -z "${SCHEDULE}" && continue
	if printf "${SCHEDULE}" | grep -q '[^A-Za-z0-9_-]'; then
		echo "W: character not allowed in '${SCHEDULE}' schedule name (${CLIENT} ignored)"
		continue
	fi

	STORAGE=$(printf "${LINE}" | cut -d\| -f4)
	test -z "${STORAGE}" && continue
	if printf "${STORAGE}" | grep -q '[^A-Za-z0-9_-]'; then
		echo "W: non alpha-numeric character in '${STORAGE}' storage host (${CLIENT} ignored)"
		continue
	fi
	if host ${STORAGE} | grep -q NXDOMAIN; then
		echo "W: storage host '${STORAGE}' not found (${CLIENT} ignored)"
		continue
	fi
	STORAGEADDR=$(host ${STORAGE} | cut '-d ' -f1)

	RETENTION=$(printf "${LINE}" | cut -d\| -f5 | sed -e "s%\s*,\s*%,%g")
	test -z "${RETENTION}" && continue
	FRETENTION=$(printf "${RETENTION}" | cut -d, -f1)
	test -z "${FRETENTION}" && continue
	JRETENTION=$(printf "${RETENTION}" | cut -d, -f2)
	test -z "${JRETENTION}" && continue
	VRETENTION=$(printf "${RETENTION}" | cut -d, -f3)
	test -z "${VRETENTION}" && continue

	MAXVOLJOBS=$(printf "${LINE}" | cut -d\| -f6)
	test -z "${MAXVOLJOBS}" || VRETENTION="${VRETENTION}
  Maximum Volume Jobs = ${MAXVOLJOBS}"

	VUSEDURATION=$(printf "${LINE}" | cut -d\| -f7)
	test -z "${VUSEDURATION}" || VRETENTION="${VRETENTION}
  Volume Use Duration = ${VUSEDURATION}"

	AUTOPRUNE=$(printf "${LINE}" | cut -d\| -f8 | tr a-z A-Z)
	test -z "${AUTOPRUNE}" && continue
	test "${AUTOPRUNE}" = "YES" -o "${AUTOPRUNE}" = "NO" || continue

	JOBS=$(printf "${LINE}" | cut -d\| -f9)
	test -z "${JOBS}" && continue

	mkclient
	mkfilesets
	mkpools
	mkstorage
	mkjobs
	echo "+ ${CLIENT}: ${JOBS} (${SCHEDULE} schedule)"
done < ${TMPFILE}

mkbanner ${BCACHE}/director.conf
cd ${BCACHE}/director
for FILE in *.conf; do
	echo "@${BCACHE}/director/${FILE}" >> ${BCACHE}/director.conf
done

mkbanner ${BCACHE}/storage.conf
cd ${BCACHE}/storage
for FILE in *.conf; do
	echo "@${BCACHE}/storage/${FILE}" >> ${BCACHE}/storage.conf
done

rm -f ${TMPFILE}
:
